char        = { 'a'..'z' | 'A'..'Z' }
num		    = { ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT+)? }
name        = @{ char+ }
value       = { num }
suffixed    = ${ value ~ expr }
property    = { name ~ "=" ~ expr }

expr = _{
	  property
    | eval
    | suffixed
    | value
    | name
    | identation ~ lines
    | "(" ~ expr ~ ")"
}

eval = { name ~ expr }

WHITESPACE = _{ " " }

lists = { lines ~ EOI }
lines = { line ~ (next_line)* }
line = _{ expr ~ (children)? }
next_line = _{ identation ~ line }

identation = ${ "\n" ~ PEEK_ALL }
identation_push = ${ identation ~ PUSH(space) }

space = _{ (" " | "\t")+ }
children = { identation_push ~ lines ~ DROP }